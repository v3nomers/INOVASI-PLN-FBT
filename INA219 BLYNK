/*************************************************************
  This is a simple demo of sending and receiving some data.
  Be sure to check out other examples!
 *************************************************************/

/* Fill-in information from Blynk Device Info here */
#define BLYNK_TEMPLATE_ID "TMPL6N3B7OSwG"
#define BLYNK_TEMPLATE_NAME "Quickstart Template"
#define BLYNK_AUTH_TOKEN "NCwhA6fHE-PTCiJ_6wEo66ijbjEjSdme"

#define BLYNK_PRINT Serial
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <Wire.h>
#include <Adafruit_INA219.h>

// Your WiFi credentials.
char ssid[] = "STARLINK-RENJAR (2,4 GHz)";
char pass[] = "abatasaja";

// Inisialisasi INA219
Adafruit_INA219 ina219;

BlynkTimer timer;

// Variabel untuk monitoring
float minVoltage = 100.0;
float maxVoltage = 0.0;
float totalEnergy = 0.0;
unsigned long lastTime = 0;
bool voltageAlert = true;
float lowVoltageThreshold = 11.5;
float highCurrentThreshold = 1500.0;

void setup() {
  Serial.begin(115200);
  Serial.println("\n🚀 Starting NodeMCU INA219 Battery Monitor...");
  
  // Initialize I2C dengan pin NodeMCU
  Wire.begin(D2, D1);  // SDA = D2, SCL = D1
  
  // Initialize INA219
  if (!ina219.begin()) {
    Serial.println("❌ Gagal menemukan INA219! Periksa koneksi.");
    while (1) {
      delay(1000);
    }
  }
  Serial.println("✅ INA219 ditemukan!");
  
  // Kalibrasi untuk baterai 12V
  ina219.setCalibration_32V_2A();
  Serial.println("✅ INA219 dikalibrasi untuk 32V/2A");
  
  // Connect to WiFi dan Blynk
  Serial.print("📡 Connecting to WiFi");
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  
  // Tunggu sampai connected
  int timeout = 0;
  while (Blynk.connected() == false && timeout < 20) {
    Serial.print(".");
    delay(500);
    timeout++;
  }
  
  if (Blynk.connected()) {
    Serial.println("\n✅ Connected to Blynk!");
  } else {
    Serial.println("\n⚠️  WiFi Connected, but Blynk timeout");
  }
  
  // Setup timer
  timer.setInterval(2000L, sendSensorData);    // Kirim data setiap 2 detik
  timer.setInterval(10000L, updateStatistics); // Update stats setiap 10 detik
  
  lastTime = millis();
  
  Serial.println("=================================");
  Serial.println("🔋 SYSTEM READY - Monitoring Started");
  Serial.println("=================================");
}

void loop() {
  Blynk.run();
  timer.run();
}

// 📊 FUNGSI UNTUK KIRIM DATA KE BLYNK
void sendSensorData() {
  // Baca data dari INA219
  float busVoltage = ina219.getBusVoltage_V();
  float shuntVoltage = ina219.getShuntVoltage_mV();
  float current_mA = ina219.getCurrent_mA();
  float power_mW = ina219.getPower_mW();
  float loadVoltage = busVoltage + (shuntVoltage / 1000);
  
  // Update min/max voltage
  if (busVoltage < minVoltage) minVoltage = busVoltage;
  if (busVoltage > maxVoltage) maxVoltage = busVoltage;
  
  // Hitung energy consumption
  unsigned long currentTime = millis();
  float timeHours = (currentTime - lastTime) / 3600000.0;
  totalEnergy += power_mW * timeHours;
  lastTime = currentTime;
  
  // Hitung estimated battery capacity
  float capacity = calculateBatteryCapacity(busVoltage);
  
  // 📨 KIRIM SEMUA DATA KE BLYNK
  Blynk.virtualWrite(V0, busVoltage);      // V0 - Battery Voltage
  Blynk.virtualWrite(V1, current_mA);      // V1 - Current
  Blynk.virtualWrite(V2, power_mW);        // V2 - Power
  Blynk.virtualWrite(V3, loadVoltage);     // V3 - Load Voltage
  Blynk.virtualWrite(V4, shuntVoltage);    // V4 - Shunt Voltage
  Blynk.virtualWrite(V5, minVoltage);      // V5 - Min Voltage
  Blynk.virtualWrite(V6, maxVoltage);      // V6 - Max Voltage
  Blynk.virtualWrite(V8, totalEnergy);     // V8 - Energy Used
  Blynk.virtualWrite(V9, capacity);        // V9 - Battery Capacity
  
  // Battery Status
  String batteryStatus = getBatteryStatus(busVoltage);
  Blynk.virtualWrite(V7, batteryStatus);   // V7 - Battery Status
  
  // Cek dan kirim alert (tanpa notify)
  checkAlerts(busVoltage, current_mA);
  
  // 📟 Tampilkan di Serial Monitor
  Serial.printf("🔋 V: %.2fV | ⚡ I: %.1fmA | 💡 P: %.0fmW | Status: %s\n", 
                busVoltage, current_mA, power_mW, batteryStatus.c_str());
}

// 🔧 FUNGSI TAMBAHAN
float calculateBatteryCapacity(float voltage) {
  // Estimasi kapasitas baterai 12V Lead Acid
  if (voltage >= 12.7) return 100.0;
  if (voltage >= 12.5) return 75.0;
  if (voltage >= 12.3) return 50.0;
  if (voltage >= 12.1) return 25.0;
  if (voltage >= 11.9) return 10.0;
  return 0.0;
}

String getBatteryStatus(float voltage) {
  if (voltage >= 12.7) return "FULL";
  if (voltage >= 12.4) return "HIGH";
  if (voltage >= 12.1) return "NORMAL";
  if (voltage >= 11.8) return "LOW";
  return "CRITICAL";
}

void checkAlerts(float voltage, float current) {
  if (!voltageAlert) return;
  
  // 🔴 HAPUS Blynk.notify() - ganti dengan virtual write ke pin khusus untuk alert
  if (voltage < lowVoltageThreshold) {
    String message = "LOW:" + String(voltage, 1) + "V";
    Blynk.virtualWrite(V14, message);  // V14 untuk alert message
    Serial.println("⚠️ BATTERY LOW: " + String(voltage, 1) + "V");
  } else if (abs(current) > highCurrentThreshold) {
    String message = "HIGH_CURRENT:" + String(current, 0) + "mA";
    Blynk.virtualWrite(V14, message);  // V14 untuk alert message
    Serial.println("⚠️ HIGH CURRENT: " + String(current, 0) + "mA");
  } else {
    Blynk.virtualWrite(V14, "NORMAL");  // Reset alert status
  }
}

void updateStatistics() {
  Serial.printf("📈 Stats | Min: %.2fV | Max: %.2fV | Energy: %.0fmWh\n", 
                minVoltage, maxVoltage, totalEnergy);
}

// 🎮 BLYNK CONTROL HANDLERS
BLYNK_WRITE(V10) { // Reset Statistics Button
  if (param.asInt() == 1) {
    minVoltage = 100.0;
    maxVoltage = 0.0;
    totalEnergy = 0.0;
    
    Blynk.virtualWrite(V5, minVoltage);
    Blynk.virtualWrite(V6, maxVoltage);
    Blynk.virtualWrite(V8, totalEnergy);
    Blynk.virtualWrite(V7, "RESET");
    Blynk.virtualWrite(V14, "NORMAL"); // Reset alert juga
    
    Serial.println("🔄 Statistics Reset!");
    Blynk.virtualWrite(V10, 0);
  }
}

BLYNK_WRITE(V11) { // Voltage Alert Switch
  voltageAlert = param.asInt();
  Serial.println(voltageAlert ? "🔔 Alerts ON" : "🔕 Alerts OFF");
}

BLYNK_WRITE(V12) { // Low Voltage Threshold Slider
  lowVoltageThreshold = param.asDouble();
  Serial.println("📉 Low Voltage Threshold: " + String(lowVoltageThreshold) + "V");
}

BLYNK_WRITE(V13) { // High Current Threshold Slider
  highCurrentThreshold = param.asDouble();
  Serial.println("📈 High Current Threshold: " + String(highCurrentThreshold) + "mA");
}

// 🔗 Blynk Connected Event
BLYNK_CONNECTED() {
  Serial.println("📱 Blynk Connected - Syncing values...");
  Blynk.syncVirtual(V11, V12, V13);
}
